/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 20:53:59 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vehicle_ESTest extends Vehicle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "Vehicle", "E", "^", (-30), 2084.319103784194, point2D_Double0, 0.0, (-30), 0.0);
      Helicopter helicopter0 = new Helicopter("Vehicle", 8.5, point2D_Double0, "E");
      ArrayList<Trip> arrayList0 = helicopter0.getTrips();
      arrayList0.add(trip0);
      helicopter0.setTrips(arrayList0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(1L);
      int int0 = helicopter0.moneyGeneratedBetween(localDate1, localDate0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(0, int0);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("Tipo : class Car\nMatricula : Qjl@U>.jj`:\nVelocidade m\u00E9dia por km : 65.0\nPre\u00E7o m\u00E9dio por km : 1.5\nFator de fiabilidade : -2574.9434\nDisponibilidade : true\nNumero de lugares: 4\nPosi\u00E7\u00E3o : (0.0,0.0)\nOwner : Qjl@U>.jj`:\n---------\nFila de Espera : \nFila de espera vazia.\n\n", (-1.0), point2D_Double0, "Tipo : class Car\nMatricula : Qjl@U>.jj`:\nVelocidade m\u00E9dia por km : 65.0\nPre\u00E7o m\u00E9dio por km : 1.5\nFator de fiabilidade : -2574.9434\nDisponibilidade : true\nNumero de lugares: 4\nPosi\u00E7\u00E3o : (0.0,0.0)\nOwner : Qjl@U>.jj`:\n---------\nFila de Espera : \nFila de espera vazia.\n\n");
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double1 = trip0.getEnd();
      bike0.addClient("Qjl@U>.jj`:", point2D_Double1, point2D_Double0);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1,bike0.getQueue().size(),0.0001);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Double double0 = new Double(8.5);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, double0, localDate0, "Vehicle", "E", "", 3, 2084.319103784194, point2D_Double0, 0.0, 0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("Vehicle", 8.5, point2D_Double0, "E");
      ArrayList<Trip> arrayList0 = helicopter0.getTrips();
      arrayList0.add(trip0);
      helicopter0.setTrips(arrayList0);
      int int0 = helicopter0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(8, int0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) (-1.0), localDate0, "Vehicle", "E", "", (-30), 2084.319103784194, point2D_Double0, (-1.0), 0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("Vehicle", 8.5, point2D_Double0, "E");
      ArrayList<Trip> arrayList0 = helicopter0.getTrips();
      arrayList0.add(trip0);
      helicopter0.setTrips(arrayList0);
      int int0 = helicopter0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals((-1), int0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("{x)SSU.", 1.5, point2D_Double0, (String) null);
      van0.setAvailable(false);
      boolean boolean0 = van0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "\nMatr\u00EDcula ve\u00EDculo : ");
      helicopter0.setSpeed(0.0);
      double double0 = helicopter0.getSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.setSpeed((-1212.63));
      double double0 = helicopter0.getSpeed();
      assertEquals((-1212.63), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.setSeats(0);
      int int0 = helicopter0.getSeats();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Helicopter helicopter0 = new Helicopter("ZuBrJ2MQP%@~a;x)NU", 0.0, point2D_Double0, (String) null);
      helicopter0.setSeats((-1));
      int int0 = helicopter0.getSeats();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("5c/", 0.0, point2D_Double0, "5c/");
      helicopter0.setReliable(1836.3173683);
      double double0 = helicopter0.getReliable();
      assertEquals(1836.3173683, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("nK28!P3b", (-1228.33318375), point2D_Double0, "P%75pBR");
      double double0 = car0.getReliable();
      assertEquals(4, car0.getSeats());
      assertEquals((-1228.33318375), double0, 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("xJ{S)", 886.50565489, point2D_Double0, "xJ{S)");
      bike0.setPrice(0.0);
      double double0 = bike0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Van van0 = new Van((String) null, 1717.1632, point2D_Double0, "");
      van0.setPrice((-1214.7909455687188));
      double double0 = van0.getPrice();
      assertEquals((-1214.7909455687188), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 0.0, point2D_Double0, (String) null);
      helicopter0.getOwner();
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Van van0 = new Van((String) null, 1717.1632, point2D_Double0, "");
      van0.getOwner();
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Helicopter helicopter0 = new Helicopter((String) null, 1717.1632, point2D_Double0, "");
      helicopter0.getLicencePlate();
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("nK28!P3b", (-1228.33318375), point2D_Double0, "nK28!P3b");
      car0.setLicencePlate("");
      car0.getLicencePlate();
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getEnd();
      Helicopter helicopter0 = new Helicopter("vb$(c~8H6vEVR", 2753.096, point2D_Double0, "vb$(c~8H6vEVR");
      Van van0 = new Van("b5\">D,u", 1809.989669546, point2D_Double0, "@]Mti4|d");
      boolean boolean0 = helicopter0.equals((Vehicle) van0);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter(">0yf@B", 3004.0, point2D_Double0, ">0yf@B");
      Vehicle vehicle0 = helicopter0.clone();
      assertEquals(110.0, vehicle0.getSpeed(), 0.01);
      assertEquals(8.5, vehicle0.getPrice(), 0.01);
      assertEquals(3, vehicle0.getSeats());
      assertEquals(3004.0, helicopter0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getEnd();
      Bike bike0 = new Bike("y#b.2", (-945.98159035449), point2D_Double0, "wBe");
      Vehicle vehicle0 = bike0.clone();
      assertEquals(0.9, vehicle0.getPrice(), 0.01);
      assertEquals(75.0, vehicle0.getSpeed(), 0.01);
      assertEquals(1, vehicle0.getSeats());
      assertEquals((-945.98159035449), bike0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-241.93400095754), 0.0);
      Car car0 = new Car("g2r'66'", 0.0, point2D_Double0, "\u00BA lugar :");
      Vehicle vehicle0 = car0.clone();
      assertEquals(4, vehicle0.getSeats());
      assertEquals(65.0, vehicle0.getSpeed(), 0.01);
      assertEquals(1.5, vehicle0.getPrice(), 0.01);
      assertEquals(0.0, car0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(626.9629420044, 0.0);
      Car car0 = new Car((String) null, 0.0, point2D_Double0, "\n\n");
      ArrayList<Trip> arrayList0 = car0.getTrips();
      arrayList0.add((Trip) null);
      // Undeclared exception!
      try { 
        car0.setTrips(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = helicopter0.getQueueInfo();
      hashMap0.putIfAbsent("Fila de espera vazia.", (ArrayList<Point2D.Double>) null);
      // Undeclared exception!
      try { 
        helicopter0.setQueueInfo(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double0, "Qjl@U>.jj`:");
      // Undeclared exception!
      try { 
        car0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "Vehicle", "E", "", (-30), 2084.319103784194, point2D_Double0, 0.0, 0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("Vehicle", 8.5, point2D_Double0, "E");
      ArrayList<Trip> arrayList0 = helicopter0.getTrips();
      arrayList0.add(trip0);
      helicopter0.setTrips(arrayList0);
      // Undeclared exception!
      try { 
        helicopter0.moneyGeneratedBetween((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.setLicencePlate((String) null);
      // Undeclared exception!
      try { 
        helicopter0.equals((Vehicle) helicopter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("DgR%S_Z@", 0.0, point2D_Double0, "DgR%S_Z@");
      // Undeclared exception!
      try { 
        car0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("xJ{S)", 886.50565489, point2D_Double0, "xJ{S)");
      // Undeclared exception!
      try { 
        bike0.addClient("xJ{S)", (Point2D.Double) null, point2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("3=P)&A", 0.0, point2D_Double0, "Fila de espera vazia.");
      String string0 = helicopter0.printQueue();
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals("Fila de espera vazia.", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1274.252861, 562.67838);
      Bike bike0 = new Bike("VwOI(KjSCwPLp,Pk", 1274.252861, point2D_Double0, "VwOI(KjSCwPLp,Pk");
      bike0.setTrips((ArrayList<Trip>) null);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.addClient("-A`A1y\"", point2D_Double0, point2D_Double0);
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = helicopter0.getQueueInfo();
      helicopter0.setQueueInfo(hashMap0);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getEnd();
      Van van0 = new Van("m:", (-3020.427204239), point2D_Double0, "@");
      van0.setQueueInfo((HashMap<String, ArrayList<Point2D.Double>>) null);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "\nMatr\u00EDcula ve\u00EDculo : ");
      helicopter0.addClient("\nMatr\u00EDcula ve\u00EDculo : ", point2D_Double0, point2D_Double0);
      LinkedList<String> linkedList0 = helicopter0.getQueue();
      helicopter0.setQueue(linkedList0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertTrue(linkedList0.contains("\nMatr\u00EDcula ve\u00EDculo : "));
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.setQueue((LinkedList<String>) null);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double0, "Qjl@U>.jj`:");
      Bike bike0 = new Bike((String) null, (-1.0), point2D_Double0, "Tipo : class Car\nMatricula : Qjl@U>.jj`:\nVelocidade m\u00E9dia por km : 65.0\nPre\u00E7o m\u00E9dio por km : 1.5\nFator de fiabilidade : -2574.9434\nDisponibilidade : true\nNumero de lugares: 4\nPosi\u00E7\u00E3o : (0.0,0.0)\nOwner : Qjl@U>.jj`:\n---------\nFila de Espera : \nFila de espera vazia.\n\n");
      LinkedList<String> linkedList0 = bike0.getQueue();
      car0.setQueue(linkedList0);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(28, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "$30w", "$30w", "$30w", 28, 28, point2D_Double0, 0.0, 28, 25.447970616395075);
      Helicopter helicopter0 = new Helicopter("$30w", 25.447970616395075, point2D_Double0, "$30w");
      ArrayList<Trip> arrayList0 = helicopter0.getTrips();
      arrayList0.add(trip0);
      helicopter0.setTrips(arrayList0);
      ArrayList<Trip> arrayList1 = helicopter0.getTrips();
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(1, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-241.93400095754), 0.0);
      Car car0 = new Car("g2r'66'", 0.0, point2D_Double0, "\u00BA lugar :");
      car0.isAvailable();
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-241.93400095754), 0.0);
      Car car0 = new Car("g2r'66'", 0.0, point2D_Double0, "\u00BA lugar :");
      car0.getPosition();
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("nK28!P3b", (-1228.33318375), point2D_Double0, "nK28!P3b");
      car0.getOwner();
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("nK28!P3b", (-1228.33318375), point2D_Double0, "nK28!P3b");
      car0.getLicencePlate();
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      double double0 = helicopter0.getReliable();
      assertEquals(0.0, double0, 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("MZ", (-2541.6220640319125), point2D_Double0, "MZ");
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip();
      LocalDate localDate1 = trip0.getDate();
      car0.addTrip(trip0);
      int int0 = car0.moneyGeneratedBetween(localDate1, localDate0);
      assertEquals(0, int0);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "Vehicle", "E", "^", (-30), 2084.319103784194, point2D_Double0, 0.0, (-30), 0.0);
      Helicopter helicopter0 = new Helicopter("Vehicle", 8.5, point2D_Double0, "E");
      ArrayList<Trip> arrayList0 = helicopter0.getTrips();
      arrayList0.add(trip0);
      helicopter0.setTrips(arrayList0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(1L);
      int int0 = helicopter0.moneyGeneratedBetween(localDate1, localDate1);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double0, "Qjl@U>.jj`:");
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip();
      car0.addTrip(trip0);
      int int0 = car0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(0, int0);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.addClient("-A`A1y\"", point2D_Double0, point2D_Double0);
      String string0 = helicopter0.toString();
      assertEquals("Tipo : class Helicopter\nMatricula : \nMatr\u00EDcula ve\u00EDculo : \nVelocidade m\u00E9dia por km : 110.0\nPre\u00E7o m\u00E9dio por km : 8.5\nFator de fiabilidade : 0.0\nDisponibilidade : true\nNumero de lugares: 3\nPosi\u00E7\u00E3o : (0.0,0.0)\nOwner : -A`A1y\"\n---------\nFila de Espera : \n1\u00BA lugar :-A`A1y\"\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      double double0 = helicopter0.getPrice();
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      int int0 = helicopter0.getSeats();
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.removeClient("");
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.setOwner("\nMatr\u00EDcula ve\u00EDculo : ");
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("3=P)&A", 0.0, point2D_Double0, "Fila de espera vazia.");
      helicopter0.setPosition(point2D_Double0);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Trip trip0 = new Trip();
      Point2D.Double point2D_Double0 = trip0.getStart();
      Car car0 = new Car("j&Z", 1.9, point2D_Double0, "j&Z");
      double double0 = car0.getSpeed();
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, double0, 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("\nMatr\u00EDcula ve\u00EDculo : ", 0.0, point2D_Double0, "-A`A1y\"");
      helicopter0.equals((Vehicle) helicopter0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double0, "Qjl@U>.jj`:");
      Trip trip0 = new Trip();
      car0.addTrip(trip0);
      // Undeclared exception!
      try { 
        car0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test
    public void addCliente() {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double0, "Qjl@U>.jj`:");
      car0.addClient("(`#txXg6ycCb',XTmM",new Point2D.Double(),new Point2D.Double(0,5));
      assertEquals(true, car0.getQueue().contains("(`#txXg6ycCb',XTmM"));
      assertEquals(1,car0.getQueue().size(),0.0001);

  }

    @Test
    public void removeCliente() {
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double0, "Qjl@U>.jj`:");
        car0.addClient("(`#txXg6ycCb',XTmM",new Point2D.Double(),new Point2D.Double(0,5));
        car0.removeClient("(`#txXg6ycCb',XTmM");
        assertEquals(false, car0.getQueue().contains("(`#txXg6ycCb',XTmM"));
        assertEquals(0,car0.getQueue().size(),0.0001);
    }

    @Test
    public void addTrip() {
        Point2D.Double point2D_Double0 = new Point2D.Double((2486), (248));
        LocalDate localDate0 = MockLocalDate.ofEpochDay((-2486));
        assertNotNull(localDate0);
        Trip trip0 = new Trip((-2486), new Point2D.Double(), point2D_Double0, (Double) (-2486.0), (Double) point2D_Double0.x, localDate0, "", "')TqMSNf2 |,Wg<ajDT", "", (-2486), (-1709.7291849089743), point2D_Double0, (-1617.223126), 0.0, (-1617.223126));

        Point2D.Double point2D_Double1 = new Point2D.Double();
        Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double1, "Qjl@U>.jj`:");
        car0.addTrip(trip0);
        assertEquals(true,car0.getTrips().contains(trip0));
        assertEquals(2486,car0.getPosition().getX(),0.0001);
        assertEquals(248,car0.getPosition().getY(),0.0001);


    }

    @Test
    public void dinheiroGerado() {
      LocalDate d1 = LocalDate.of(2018,11,12);
      Trip trip0 = new Trip(500, new Point2D.Double(), new Point2D.Double(5,0), 5.0, 10.0, d1, "","", "", 5, 5.0, new Point2D.Double(), 8.0, 10.0, 7.0);
      Point2D.Double point2D_Double1 = new Point2D.Double();
      Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double1, "Qjl@U>.jj`:");
      car0.addTrip(trip0);
      assertEquals(10,car0.moneyGeneratedBetween(d1.minusDays(1),d1.plusDays(1)),0.0001);

        }

    @Test
    public void addClient1() {
        Point2D.Double point2D_Double1 = new Point2D.Double();
        Car car0 = new Car("Qjl@U>.jj`:", (-2574.9434), point2D_Double1, "Qjl@U>.jj`:");
        Client c = new Client("b3tzpG%Gw2G-", "", "b3tzpG%Gw2G-", "",LocalDate.of(1990,11,12));
        car0.addClient("joao",new Point2D.Double(0,-1),new Point2D.Double(2,0));
        assertEquals("joao",car0.getQueue().get(0));
        assertEquals(1,car0.getQueue().size(),0.0001);
        assertEquals(0,car0.getQueueInfo().get("joao").get(0).getX(),0.0001);
        assertEquals(-1,car0.getQueueInfo().get("joao").get(0).getY(),0.0001);
        assertEquals(2,car0.getQueueInfo().get("joao").get(1).getX(),0.0001);
        assertEquals(0,car0.getQueueInfo().get("joao").get(1).getY(),0.0001);
        car0.removeClient("joao");
        assertEquals(true,car0.getQueue().isEmpty());
        assertEquals(0,car0.getQueue().size(),0.0001);
        assertEquals(true,car0.getQueueInfo().isEmpty());



    }
}
