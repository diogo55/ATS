/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 21:29:13 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trip_ESTest extends Trip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2486), (-2486));
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2486));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-2486), point2D_Double0, point2D_Double0, (Double) (-2486.0), (Double) point2D_Double0.x, localDate0, "", "')TqMSNf2 |,Wg<ajDT", "", (-2486), (-1709.7291849089743), point2D_Double0, (-1617.223126), 0.0, (-1617.223126));
      assertEquals((-2486.0), trip0.getTime(), 0.01);
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip0.getDriver());
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2486.0), trip0.getPrice(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-2486), trip0.getID());
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1709.7291849089743), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.toString();
      assertEquals((-2486.0), trip0.getTime(), 0.01);
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip0.getDriver());
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2486.0), trip0.getPrice(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-2486), trip0.getID());
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1709.7291849089743), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertEquals("Viagem de (-2486.0,-2486.0) ---> (-2486.0,-2486.0)\nData : 1963-03-13\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : -1709h:-44m:-45s\nDura\u00E7\u00E3o real : -2486h:0m:0s\nPre\u00E7o : -2486\u20AC\nEmail condutor : ')TqMSNf2 |,Wg<ajDT\nEmail cliente : \nMatr\u00EDcula ve\u00EDculo : \nClassifica\u00E7\u00E3o : -2486**\nPosi\u00E7\u00E3o inicial do taxi : [-2486.0,-2486.0]\nTempo previsto at\u00E9 ao cliente : -1617h:-13m:-23s\nTempo real at\u00E9 ao cliente : 0h:0m:0s\nPre\u00E7o estimado : -1617\u20AC\nTrip id : -2486", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1066.706, (-876));
      assertEquals((-876.0), point2D_Double0.y, 0.01);
      assertEquals(1066.706, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofDays((-876));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-876));
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-876), point2D_Double0, point2D_Double0, (Double) 1066.7060546875, (Double) 1066.7060546875, localDate0, "", "}QI|{G/aNyDmrM]fcX", "\nPre\u00E7o estimado : ", 1, 0.0, point2D_Double0, 0.0, 1066.7060546875, (-1.0));
      assertEquals("}QI|{G/aNyDmrM]fcX", trip0.getDriver());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1066.7060546875, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-876), trip0.getID());
      assertEquals("\nPre\u00E7o estimado : ", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1066.7060546875, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1066.7060546875, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-876.0), point2D_Double0.y, 0.01);
      assertEquals(1066.706, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getTime();
      assertEquals("}QI|{G/aNyDmrM]fcX", trip0.getDriver());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1066.7060546875, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-876), trip0.getID());
      assertEquals("\nPre\u00E7o estimado : ", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1066.7060546875, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1066.7060546875, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-876.0), point2D_Double0.y, 0.01);
      assertEquals(1066.706, point2D_Double0.x, 0.01);
      assertEquals(1066.7060546875, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "", "", (-989), (-989), point2D_Double0, 1562.562166995, (-1), (-1));
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-989), trip0.getRating());
      assertEquals((-1), trip0.getID());
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getTime();
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-989), trip0.getRating());
      assertEquals((-1), trip0.getID());
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-382.3857038783292), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-382.3857038783292), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1809, point2D_Double0, point2D_Double0, (Double) (-382.3857038783292), (Double) 648.0, localDate0, "", "?q?*CR", "", 7689, (-687.0), point2D_Double0, 1809, 7689, 0.0);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(7689.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("?q?*CR", trip0.getDriver());
      assertEquals((-687.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1809, trip0.getID());
      assertEquals("", trip0.getClient());
      assertEquals(1809.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(648.0, trip0.getPrice(), 0.01);
      assertEquals((-382.3857038783292), trip0.getTime(), 0.01);
      assertEquals(7689, trip0.getRating());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-382.3857038783292), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getTime();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(7689.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("?q?*CR", trip0.getDriver());
      assertEquals((-687.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1809, trip0.getID());
      assertEquals("", trip0.getClient());
      assertEquals(1809.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(648.0, trip0.getPrice(), 0.01);
      assertEquals((-382.3857038783292), trip0.getTime(), 0.01);
      assertEquals(7689, trip0.getRating());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-382.3857038783292), point2D_Double0.x, 0.01);
      assertEquals((-382.3857038783292), (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "", "Hc,'=P=N(gD:MO\u0004@\u0003", "^Kp", (-296), 0.0, point2D_Double0, 1, 1831.7381319, 1);
      assertEquals("^Kp", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(1831.7381319, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-296), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("Hc,'=P=N(gD:MO\u0004@\u0003", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getRealTimeToClient();
      assertEquals("^Kp", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(1831.7381319, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-296), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("Hc,'=P=N(gD:MO\u0004@\u0003", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(1831.7381319, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "", "", (-989), (-989), point2D_Double0, 1562.562166995, (-1), (-1));
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals((-989), trip0.getRating());
      assertEquals((-1), trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getRealTimeToClient();
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("", trip0.getClient());
      assertEquals((-989), trip0.getRating());
      assertEquals((-1), trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertNotNull(trip0);
      
      int int0 = trip0.getRating();
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertNull(trip0.getDriver());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.y, localDate0, ">B[GvX", "'WraM^1t&D+`E", ">B[GvX", (-405), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals((-405), trip0.getRating());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      trip0.setRating(1738);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1738, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      int int0 = trip0.getRating();
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1738, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(1738, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "", "", (-989), (-989), point2D_Double0, 1562.562166995, (-1), (-1));
      assertEquals((-989), trip0.getRating());
      assertEquals("", trip0.getClient());
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      Double double0 = trip0.getPrice();
      assertEquals((-989), trip0.getRating());
      assertEquals("", trip0.getClient());
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Double double0 = new Double((-289.65313));
      assertEquals((-289.65313), (double)double0, 0.01);
      assertNotNull(double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) (-289.65313), double0, localDate0, "A;Mj", "A;Mj", "A;Mj", 1, 0.0, point2D_Double0, (-1.0), 135.4884237875171, 0.0);
      assertEquals(135.4884237875171, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-289.65313), trip0.getPrice(), 0.01);
      assertEquals("A;Mj", trip0.getLicencePlate());
      assertEquals("A;Mj", trip0.getClient());
      assertEquals("A;Mj", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-289.65313), trip0.getTime(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      Double double1 = trip0.getPrice();
      assertEquals(135.4884237875171, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-289.65313), trip0.getPrice(), 0.01);
      assertEquals("A;Mj", trip0.getLicencePlate());
      assertEquals("A;Mj", trip0.getClient());
      assertEquals("A;Mj", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-289.65313), trip0.getTime(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-289.65313), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getLicencePlate();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2486), (-2486));
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2486));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-2486), point2D_Double0, point2D_Double0, (Double) (-2486.0), (Double) point2D_Double0.x, localDate0, "", "')TqMSNf2 |,Wg<ajDT", "", (-2486), (-1709.7291849089743), point2D_Double0, (-1617.223126), 0.0, (-1617.223126));
      assertEquals("", trip0.getClient());
      assertEquals((-1709.7291849089743), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-2486.0), trip0.getTime(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2486), trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip0.getDriver());
      assertEquals((-2486.0), trip0.getPrice(), 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getLicencePlate();
      assertEquals("", trip0.getClient());
      assertEquals((-1709.7291849089743), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-2486.0), trip0.getTime(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2486), trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip0.getDriver());
      assertEquals((-2486.0), trip0.getPrice(), 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, ">B[GvX", "'WraM^1t&D+`E", ">B[GvX", (-405), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-405), trip0.getRating());
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      int int0 = trip0.getID();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-405), trip0.getRating());
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      assertEquals((-178.59528678), point2D_Double0.x, 0.01);
      assertEquals(1908.1822640543, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals(1908.1822640543, trip0.getTime(), 0.01);
      assertEquals("n", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(1908.1822640543, trip0.getPrice(), 0.01);
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals((-178.59528678), point2D_Double0.x, 0.01);
      assertEquals(1908.1822640543, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      int int0 = trip0.getID();
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals(1908.1822640543, trip0.getTime(), 0.01);
      assertEquals("n", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(1908.1822640543, trip0.getPrice(), 0.01);
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals((-178.59528678), point2D_Double0.x, 0.01);
      assertEquals(1908.1822640543, point2D_Double0.y, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1066.706, (-876));
      assertEquals((-876.0), point2D_Double0.y, 0.01);
      assertEquals(1066.706, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofDays((-876));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-876));
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-876), point2D_Double0, point2D_Double0, (Double) 1066.7060546875, (Double) 1066.7060546875, localDate0, "", "}QI|{G/aNyDmrM]fcX", "\nPre\u00E7o estimado : ", 1, 0.0, point2D_Double0, 0.0, 1066.7060546875, (-1.0));
      assertEquals("}QI|{G/aNyDmrM]fcX", trip0.getDriver());
      assertEquals(1, trip0.getRating());
      assertEquals(1066.7060546875, trip0.getTime(), 0.01);
      assertEquals(1066.7060546875, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-876), trip0.getID());
      assertEquals("\nPre\u00E7o estimado : ", trip0.getClient());
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1066.7060546875, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-876.0), point2D_Double0.y, 0.01);
      assertEquals(1066.706, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals("}QI|{G/aNyDmrM]fcX", trip0.getDriver());
      assertEquals(1, trip0.getRating());
      assertEquals(1066.7060546875, trip0.getTime(), 0.01);
      assertEquals(1066.7060546875, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-876), trip0.getID());
      assertEquals("\nPre\u00E7o estimado : ", trip0.getClient());
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1066.7060546875, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-876.0), point2D_Double0.y, 0.01);
      assertEquals(1066.706, point2D_Double0.x, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1684.02956457805, 3836);
      assertEquals(1684.02956457805, point2D_Double0.x, 0.01);
      assertEquals(3836.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2484L);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(3836, point2D_Double0, point2D_Double0, (Double) 3836.0, (Double) 3836.0, localDate0, "v_*W&Y_", "", "v_*W&Y_", (-899), 3600.0, point2D_Double0, 0.0, 3600.0, 0.0);
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(3600.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("v_*W&Y_", trip0.getLicencePlate());
      assertEquals(3836.0, trip0.getPrice(), 0.01);
      assertEquals((-899), trip0.getRating());
      assertEquals("v_*W&Y_", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3836, trip0.getID());
      assertEquals(3836.0, trip0.getTime(), 0.01);
      assertEquals(3600.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1684.02956457805, point2D_Double0.x, 0.01);
      assertEquals(3836.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(3600.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("v_*W&Y_", trip0.getLicencePlate());
      assertEquals(3836.0, trip0.getPrice(), 0.01);
      assertEquals((-899), trip0.getRating());
      assertEquals("v_*W&Y_", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3836, trip0.getID());
      assertEquals(3836.0, trip0.getTime(), 0.01);
      assertEquals(3600.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1684.02956457805, point2D_Double0.x, 0.01);
      assertEquals(3836.0, point2D_Double0.y, 0.01);
      assertEquals(3600.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "", "Hc,'=P=N(gD:MO\u0004@\u0003", "^Kp", (-296), 0.0, point2D_Double0, 1, 1831.7381319, 1);
      assertEquals((-296), trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1831.7381319, trip0.getRealTimeToClient(), 0.01);
      assertEquals("Hc,'=P=N(gD:MO\u0004@\u0003", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("^Kp", trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals((-296), trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1831.7381319, trip0.getRealTimeToClient(), 0.01);
      assertEquals("Hc,'=P=N(gD:MO\u0004@\u0003", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("^Kp", trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "h>US@", "", "", 285, 434.0, point2D_Double0, (-1), 0.0, 0.0);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(434.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1), trip0.getID());
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(285, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("h>US@", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(434.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1), trip0.getID());
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(285, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals("h>US@", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "h>US@", "", "", 285, 434.0, point2D_Double0, (-1), 0.0, 0.0);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(285, trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(434.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals("h>US@", trip0.getLicencePlate());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedPrice();
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(285, trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(434.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals("h>US@", trip0.getLicencePlate());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2486), (-2486));
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2486));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-2486), point2D_Double0, point2D_Double0, (Double) (-2486.0), (Double) point2D_Double0.x, localDate0, "", "')TqMSNf2 |,Wg<ajDT", "", (-2486), (-1709.7291849089743), point2D_Double0, (-1617.223126), 0.0, (-1617.223126));
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2486.0), trip0.getPrice(), 0.01);
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip0.getDriver());
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-2486.0), trip0.getTime(), 0.01);
      assertEquals((-1709.7291849089743), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-2486), trip0.getID());
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      double double0 = trip0.getEstimatedPrice();
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2486.0), trip0.getPrice(), 0.01);
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip0.getDriver());
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-2486.0), trip0.getTime(), 0.01);
      assertEquals((-1709.7291849089743), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-2486), trip0.getID());
      assertEquals((-2486.0), point2D_Double0.x, 0.01);
      assertEquals((-2486.0), point2D_Double0.y, 0.01);
      assertEquals((-1617.223126), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertNotNull(trip0);
      
      String string0 = trip0.getDriver();
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "", "", (-989), (-989), point2D_Double0, 1562.562166995, (-1), (-1));
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals((-989), trip0.getRating());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getDriver();
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals("", trip0.getDriver());
      assertEquals((-989), trip0.getRating());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Trip trip0 = new Trip();
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getClient();
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, ">B[GvX", "'WraM^1t&D+`E", ">B[GvX", (-405), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-405), trip0.getRating());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      String string0 = trip0.getClient();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-405), trip0.getRating());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(">B[GvX", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double((-289.65313), 1.0);
      assertEquals((-289.65313), point2D_Double1.x, 0.01);
      assertEquals(1.0, point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double1, (Double) (-289.65313), (Double) point2D_Double1.x, localDate0, "A;Mj", "A;Mj", "A;Mj", 1, 0.0, point2D_Double1, (-1.0), 135.4884237875171, 0.0);
      assertEquals("A;Mj", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-289.65313), trip0.getTime(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(1, trip0.getID());
      assertEquals(135.4884237875171, trip0.getRealTimeToClient(), 0.01);
      assertEquals("A;Mj", trip0.getLicencePlate());
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("A;Mj", trip0.getDriver());
      assertEquals((-289.65313), trip0.getPrice(), 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-289.65313), point2D_Double1.x, 0.01);
      assertEquals(1.0, point2D_Double1.y, 0.01);
      assertNotNull(trip0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      double double0 = trip0.distance();
      assertEquals("A;Mj", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-289.65313), trip0.getTime(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(1, trip0.getID());
      assertEquals(135.4884237875171, trip0.getRealTimeToClient(), 0.01);
      assertEquals("A;Mj", trip0.getLicencePlate());
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("A;Mj", trip0.getDriver());
      assertEquals((-289.65313), trip0.getPrice(), 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-289.65313), point2D_Double1.x, 0.01);
      assertEquals(1.0, point2D_Double1.y, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals(289.6548561975043, double0, 0.01);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-382.3857038783292), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-382.3857038783292), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1809, point2D_Double0, point2D_Double0, (Double) (-382.3857038783292), (Double) 648.0, localDate0, "", "?q?*CR", "", 7689, (-687.0), point2D_Double0, 1809, 7689, 0.0);
      assertEquals(648.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(7689, trip0.getRating());
      assertEquals(1809, trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1809.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("?q?*CR", trip0.getDriver());
      assertEquals(7689.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-382.3857038783292), trip0.getTime(), 0.01);
      assertEquals((-687.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-382.3857038783292), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      
      Trip trip1 = trip0.clone();
      assertEquals(648.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(7689, trip0.getRating());
      assertEquals(1809, trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1809.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("?q?*CR", trip0.getDriver());
      assertEquals(7689.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-382.3857038783292), trip0.getTime(), 0.01);
      assertEquals((-687.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-687.0), trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals("?q?*CR", trip1.getDriver());
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals(7689, trip1.getRating());
      assertEquals((-382.3857038783292), trip1.getTime(), 0.01);
      assertEquals("", trip1.getLicencePlate());
      assertEquals(648.0, trip1.getPrice(), 0.01);
      assertEquals(1809.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(7689.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(1809, trip1.getID());
      assertEquals("", trip1.getClient());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-382.3857038783292), point2D_Double0.x, 0.01);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, ">B[GvX", "'WraM^1t&D+`E", ">B[GvX", (-405), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-405), trip0.getRating());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      
      Trip trip1 = trip0.clone();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-405), trip0.getRating());
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals("'WraM^1t&D+`E", trip1.getDriver());
      assertEquals((-405), trip1.getRating());
      assertEquals(">B[GvX", trip1.getClient());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(">B[GvX", trip1.getLicencePlate());
      assertEquals(0.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "h>US@", "", "", 285, 434.0, point2D_Double0, (-1), 0.0, 0.0);
      Trip trip1 = trip0.clone();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("h>US@", trip1.getLicencePlate());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip1.getClient());
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip1.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals(434.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(285, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-387), 0.0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      Trip trip0 = new Trip((-387), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) (-387.0), localDate0, ";G?(A(B%es=L=pb!", (String) null, ";G?(A(B%es=L=pb!", (-1380), 0.0, point2D_Double0, (-1380), (-1380), 0.0);
      trip0.clone();
      assertEquals((-1380.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-387), trip0.getID());
      assertEquals((-387.0), trip0.getPrice(), 0.01);
      assertEquals((-1380.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1380), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      Trip trip1 = trip0.clone();
      assertEquals((-178.59528678), trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip1.getRating());
      assertEquals("\nDura\u00E7\u00E3o real : ", trip1.getLicencePlate());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(",ngHR*p7t/P7K}n+a4", trip1.getDriver());
      assertEquals(1908.1822640543, trip0.getPrice(), 0.01);
      assertEquals("n", trip1.getClient());
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "", "", (-989), (-989), point2D_Double0, 1562.562166995, (-1), (-1));
      trip0.clone();
      assertEquals((-989.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-989), trip0.getRating());
      assertEquals(1562.562166995, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.getTaxiPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Trip trip0 = new Trip();
      Trip trip1 = null;
      try {
        trip1 = new Trip(trip0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = mock(Point2D.Double.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(point2D_Double0).getX();
      doReturn(0.0, 0.0).when(point2D_Double0).getY();
      Trip trip0 = null;
      try {
        trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, (LocalDate) null, "?dp/", "", "V;", 526, 1.0, point2D_Double0, 0, 0.0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, ">B[GvX", "'WraM^1t&D+`E", ">B[GvX", (-405), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      int int0 = trip0.getRating();
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-405), int0);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(">B[GvX", trip0.getClient());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2486), (-2486));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2486));
      Trip trip0 = new Trip((-2486), point2D_Double0, point2D_Double0, (Double) (-2486.0), (Double) point2D_Double0.x, localDate0, "", "')TqMSNf2 |,Wg<ajDT", "", (-2486), (-1709.7291849089743), point2D_Double0, (-1617.223126), 0.0, (-1617.223126));
      Trip trip1 = new Trip(trip0);
      assertEquals((-2486.0), trip0.getTime(), 0.01);
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1709.7291849089743), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-2486), trip0.getID());
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip1.getDriver());
      assertEquals((-2486.0), trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip1.getClient());
      assertEquals("", trip1.getLicencePlate());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      Double double0 = trip0.getPrice();
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals("n", trip0.getClient());
      assertEquals(1908.1822640543, (double)double0, 0.01);
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals((-178.59528678), trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-382.3857038783292), 0.0);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(1809, point2D_Double0, point2D_Double0, (Double) (-382.3857038783292), (Double) 648.0, localDate0, "", "?q?*CR", "", 7689, (-687.0), point2D_Double0, 1809, 7689, 0.0);
      String string0 = trip0.getClient();
      assertEquals(648.0, trip0.getPrice(), 0.01);
      assertEquals((-687.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1809, trip0.getID());
      assertEquals(1809.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(7689, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(7689.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("?q?*CR", trip0.getDriver());
      assertEquals((-382.3857038783292), trip0.getTime(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      String string0 = trip0.getDriver();
      assertEquals(",ngHR*p7t/P7K}n+a4", string0);
      assertEquals(0, trip0.getRating());
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals("n", trip0.getClient());
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1908.1822640543, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-178.59528678), trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      trip0.getStart();
      assertEquals("n", trip0.getClient());
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1908.1822640543, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-178.59528678), trip0.getTime(), 0.01);
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2486), (-2486));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2486));
      Trip trip0 = new Trip((-2486), point2D_Double0, point2D_Double0, (Double) (-2486.0), (Double) point2D_Double0.x, localDate0, "", "')TqMSNf2 |,Wg<ajDT", "", (-2486), (-1709.7291849089743), point2D_Double0, (-1617.223126), 0.0, (-1617.223126));
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals((-1617.223126), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-2486), trip0.getRating());
      assertEquals((-1709.7291849089743), double0, 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1617.223126), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-2486), trip0.getID());
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getLicencePlate());
      assertEquals("')TqMSNf2 |,Wg<ajDT", trip0.getDriver());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      trip0.getTaxiPos();
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("n", trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      trip0.getEnd();
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals("n", trip0.getClient());
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, ">B[GvX", "'WraM^1t&D+`E", ">B[GvX", (-405), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(0.0, double0, 0.01);
      assertEquals(">B[GvX", trip0.getClient());
      assertEquals("'WraM^1t&D+`E", trip0.getDriver());
      assertEquals((-405), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(">B[GvX", trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      double double0 = trip0.getEstimatedPrice();
      assertEquals(435.0, double0, 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("n", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      String string0 = trip0.getLicencePlate();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o real : ", string0);
      assertEquals(1, trip0.getID());
      assertEquals("n", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "", "Hc,'=P=N(gD:MO\u0004@\u0003", "^Kp", (-296), 0.0, point2D_Double0, 1, 1831.7381319, 1);
      trip0.getDate();
      assertEquals("^Kp", trip0.getClient());
      assertEquals((-296), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("Hc,'=P=N(gD:MO\u0004@\u0003", trip0.getDriver());
      assertEquals(1831.7381319, trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(1, trip0.getID());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      trip0.distance();
      assertEquals(1, trip0.getID());
      assertEquals("n", trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1908.1822640543, trip0.getPrice(), 0.01);
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-178.59528678), trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-178.59528678), 1908.1822640543);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(311L);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 1908.1822640543, localDate0, "\nDura\u00E7\u00E3o real : ", ",ngHR*p7t/P7K}n+a4", "n", 0, 0, point2D_Double0, 1.0, 0.0, 435.0);
      double double0 = trip0.getRealTimeToClient();
      assertEquals("n", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(435.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1908.1822640543, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(",ngHR*p7t/P7K}n+a4", trip0.getDriver());
      assertEquals((-178.59528678), trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("\nDura\u00E7\u00E3o real : ", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "h>US@", "", "", 285, 434.0, point2D_Double0, (-1), 0.0, 0.0);
      int int0 = trip0.getID();
      assertEquals(434.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("h>US@", trip0.getLicencePlate());
      assertEquals("", trip0.getDriver());
      assertEquals((-1), int0);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(285, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "8RB!", "8RB!", "8RB!", (-1), 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      String string0 = trip0.toString();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("Viagem de (0.0,0.0) ---> (0.0,0.0)\nData : 2014-02-14\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : 0h:0m:0s\nDura\u00E7\u00E3o real : 0h:0m:0s\nPre\u00E7o : 0\u20AC\nEmail condutor : 8RB!\nEmail cliente : 8RB!\nMatr\u00EDcula ve\u00EDculo : 8RB!\nClassifica\u00E7\u00E3o : N\u00E3o classificado\nPosi\u00E7\u00E3o inicial do taxi : [0.0,0.0]\nTempo previsto at\u00E9 ao cliente : 0h:0m:0s\nTempo real at\u00E9 ao cliente : 0h:0m:0s\nPre\u00E7o estimado : 0\u20AC\nTrip id : -1", string0);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

}
