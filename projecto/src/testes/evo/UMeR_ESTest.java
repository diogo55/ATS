/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 20:41:48 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UMeR_ESTest extends UMeR_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        uMeR0.registerUser(client0, "E>iL*OUrvz[ZMcNY$");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "s", "", "H?2L]x>P", localDate0, 8.5, 0.0, boolean0, 2.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OUrvz[ZMcNY$", "s", 2495.368504309642);
        Car car0 = new Car((String) null, 8.5, point2D_Double0, "");
        Trip trip0 = uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        // Undeclared exception!
        try {
            uMeR0.addTrip("", "", "I2UlQsU1!k5jDqY%`", trip0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", (String) null, "1U", "", localDate0, 0.9, "1U");
        Point2D.Double point2D_Double0 = new Point2D.Double();
        uMeR0.registerUser(driver0, (String) null);
        // Undeclared exception!
        try {
            uMeR0.addQueue("", "", (Point2D.Double) null, point2D_Double0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OmUrvP[Z6cNY$", localDate0, point2D_Double0, (-5167.927219276704), arrayList0, 0, (-5167.927219276704), true, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "", "", "H?2L]x>P", localDate0, 1210.0, (-5167.927219276704), boolean0, 2.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OmUrvP[Z6cNY$", "", 2495.368504309642);
        Car car0 = new Car("L5j'cou:4|4", 1210.0, point2D_Double0, "+");
        Point2D.Double point2D_Double1 = new Point2D.Double();
        uMeR0.newTrip(client0, driver0, car0, point2D_Double1);
        assertEquals(2.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "s", "", "H?2L]x>P", localDate0, 8.5, 0.0, boolean0, 2.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OUrvz[ZMcNY$", "s", 2495.368504309642);
        driver0.addRating(0);
        Car car0 = new Car((String) null, 8.5, point2D_Double0, "");
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        assertEquals(1, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), 0.0);
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        uMeR0.registerVehicleP(bike0);
        // Undeclared exception!
        try {
            uMeR0.realTime(point2D_Double0, point2D_Double0, (Driver) null, bike0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", "---Drivers---\n", ";ZHHqtj*OBD", "", localDate0, 0.9, "2:NaHbqB.");
        uMeR0.registerUser(driver0, (String) null);
        // Undeclared exception!
        try {
            uMeR0.doAllTripsQueue("");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", "---Drivers---\n", "1U", "", localDate0, 0.9, "2:NaHbqB.");
        boolean boolean0 = uMeR0.registerUser(driver0, (String) null);
        assertTrue(boolean0);

        uMeR0.changeDriverVehicle("", "");
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Client client0 = new Client("", "", "", "", localDate0, point2D_Double0, 1210.0, arrayList0, 0, 1210.0, false, "");
        uMeR0.registerUser(client0, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "", "", "", localDate0, 1210.0, 1210.0, boolean0, 1210.0, arrayList0, 0, 0.0, 1210.0, "", "", 1210.0);
        Car car0 = new Car("L5j'cou:4|4", 1210.0, point2D_Double0, "L5j'cou:4|4");
        Trip trip0 = uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        // Undeclared exception!
        try {
            uMeR0.addTrip("", "", "", trip0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = uMeR0.getDriversP();
        LocalDate localDate0 = MockLocalDate.now();
        Boolean boolean0 = Boolean.valueOf(false);
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Driver driver0 = new Driver("VT(lQi?V%p)U(", "Utilizador - ", "\n---Clients---\n", "VT(lQi?V%p)U(", localDate0, 0, 0, boolean0, 0, arrayList0, 0, 0, 5.0, "Utilizador - ", "\neMail : ", 0);
        hashMap0.put("VT(lQi?V%p)U(", driver0);
        uMeR0.setAllDrivers(hashMap0);
        Point2D.Double point2D_Double0 = new Point2D.Double();
        // Undeclared exception!
        try {
            uMeR0.addQueue("$l5cLaLaTwDU%'", "VT(lQi?V%p)U(", point2D_Double0, point2D_Double0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        UMeR uMeR0 = new UMeR();
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Period period0 = Period.of((-2263), 881, 0);
        IsoChronology isoChronology0 = period0.getChronology();
        LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Boolean boolean0 = new Boolean(false);
        Driver driver0 = new Driver("[<n", "", "", "", localDate0, 0.0, 0.0, boolean0, 0.8, arrayList0, 1, 881, 0, "tz", "[<n", 1.0);
        Bike bike0 = new Bike("", 749.2, point2D_Double0, "");
        double double0 = uMeR0.realTime(point2D_Double0, point2D_Double0, driver0, bike0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        Point2D.Double point2D_Double1 = new Point2D.Double(5520.2874528, (-1575.8211148669352));
        Boolean boolean0 = Boolean.TRUE;
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Driver driver0 = new Driver("", "", "\nDura\u00E7\u00E3o prevista : ", "", localDate0, 1.25, 2353.8535728, boolean0, 1.25, arrayList0, 2157, 1.1323946608518065, 2157, "", "", 2.147483647E9);
        double double0 = uMeR0.realTime(point2D_Double1, point2D_Double0, driver0, bike0);
        assertEquals(112.60353172174993, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setWeather((-2145579088));
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 8.5);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "s", "", "H?2L]x>P", localDate0, 8.5, 1210.0, boolean0, 2.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OUrvz[ZMcNY$", "s", 2495.368504309642);
        Car car0 = new Car("L5j'cou:4|4", 8.5, point2D_Double0, "");
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        assertEquals((-2145579088), uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OmUrvP[Z6cNY$", localDate0, point2D_Double0, (-5167.927219276704), arrayList0, 0, (-5167.927219276704), true, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "", "", "H?2L]x>P", localDate0, 1210.0, (-5167.927219276704), boolean0, 2.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OmUrvP[Z6cNY$", "", 2495.368504309642);
        Car car0 = new Car("L5j'cou:4|4", 1210.0, point2D_Double0, "+");
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        assertEquals(3422.39682094289, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        uMeR0.setTripID((-511238509));
        Client client0 = new Client("*><P*L&+}8:", "", "", "*><P*L&+}8:", localDate0);
        Driver driver0 = new Driver("Vehicle", "", "l,[lj.", "*><P*L&+}8:", localDate0, (-1575.8211148669352), "");
        uMeR0.newTrip(client0, driver0, bike0, point2D_Double0);
        assertEquals(1704.9965354980843, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-651.0), (-651.0));
        Bike bike0 = new Bike((String) null, (-651.0), point2D_Double0, "1~");
        Client client0 = new Client("1~", "1~", "1~", "1~", localDate0);
        bike0.setPrice((651.0));
        Driver driver0 = new Driver("&Js|`/zzR5", "---Drivers---\n", (String) null, "", localDate0, (-1), "&Js|`/zzR5");
        uMeR0.newTrip(client0, driver0, bike0, point2D_Double0);
        assertEquals((557810.2919296786), uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.saveUMeR("m");
        UMeR uMeR1 = UMeR.loadUMeR("m");
        assertEquals(0, uMeR1.getTripID());
        assertEquals(0, uMeR1.getWeather());
        assertEquals(0.0, uMeR1.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR1.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR1.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        UMeR uMeR0 = new UMeR();
        assertEquals(0, uMeR0.getWeather());

        uMeR0.setWeather(1);
        int int0 = uMeR0.getWeather();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setWeather((-454185185));
        int int0 = uMeR0.getWeather();
        assertEquals((-454185185), int0);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTripID((-511238509));
        int int0 = uMeR0.getTripID();
        assertEquals((-511238509), int0);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        point2D_Double0.y = 0.9679987558325174;
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "s", "", "H?2L]x>P", localDate0, 8.5, 0.0, boolean0, 2.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OUrvz[ZMcNY$", "s", 2495.368504309642);
        Car car0 = new Car((String) null, 8.5, point2D_Double0, "H?2L]x>P");
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        double double0 = uMeR0.getTotalTime();
        assertEquals(1, uMeR0.getTripID());
        assertEquals(0.020295619176472646, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OmUrvP[Z6cNY$", localDate0, point2D_Double0, (-5167.927219276704), arrayList0, 0, (-5167.927219276704), true, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", "", "", "H?2L]x>P", localDate0, 1210.0, (-5167.927219276704), boolean0, 2.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OmUrvP[Z6cNY$", "", 2495.368504309642);
        Car car0 = new Car("L5j'cou:4|4", 1210.0, point2D_Double0, "+");
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        double double0 = uMeR0.getTotalDistance();
        assertEquals(1, uMeR0.getTripID());
        assertEquals(1711.198410471445, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setMoneyGenerated(960.48);
        double double0 = uMeR0.getMoneyGenerated();
        assertEquals(960.48, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setMoneyGenerated((-1026));
        double double0 = uMeR0.getMoneyGenerated();
        assertEquals((-1026.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", "---Drivers---\n", ";ZHHqtj*OBD", "", localDate0, 0.9, "---Drivers---\n");
        boolean boolean0 = uMeR0.registerUser(driver0, (String) null);
        assertTrue(boolean0);

        HashMap<String, Driver> hashMap0 = uMeR0.getDriversP();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(1, hashMap0.size());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double0, 1121.0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        Point2D.Double point2D_Double1 = new Point2D.Double();
        double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double1, 1.0096032064544886);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(2033.906072641123, double0, 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-363.587), 0.0);
        Point2D.Double point2D_Double1 = new Point2D.Double();
        double double0 = uMeR0.estimatedTime(point2D_Double1, point2D_Double0, (-575.7));
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals((-0.7578676393955184), double0, 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        boolean boolean0 = uMeR0.registerVehicleP(bike0);
        assertTrue(boolean0);

        Client client0 = new Client("", "", "", "UMeR", localDate0);
        String string0 = uMeR0.closestAvailableTaxi(client0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertNotNull(string0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.saveUMeR((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.File", e);
        }
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        UMeR uMeR0 = new UMeR();
        try {
            uMeR0.saveUMeR("9x");
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Simulated IOException
            //
            verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
        }
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        UMeR uMeR0 = new UMeR();
        try {
            uMeR0.saveUMeR("");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setAllDrivers((HashMap<String, Driver>) null);
        // Undeclared exception!
        try {
            uMeR0.removeUser((User) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.registerVehicleP((Vehicle) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        arrayList0.add((Trip) null);
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        // Undeclared exception!
        try {
            uMeR0.registerUser(client0, "E>iL*OUrvz[ZMcNY$");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("User", e);
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.registerCompany("---Drivers---\n", "---Drivers---\n");
        // Undeclared exception!
        try {
            uMeR0.registerCompanyVehicle("---Drivers---\n", (Vehicle) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Client> hashMap0 = uMeR0.getClients();
        hashMap0.put("P", (Client) null);
        uMeR0.setClients(hashMap0);
        // Undeclared exception!
        try {
            uMeR0.registerCompany("*><P*L&+}8:", "*><P*L&+}8:");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = new HashMap<String, Driver>();
        hashMap0.put("---Drivers---\n", (Driver) null);
        uMeR0.setAllDrivers(hashMap0);
        Comparator<Driver> comparator0 = (Comparator<Driver>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            uMeR0.ordDriver(comparator0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", "---Drivers---\n", "1U", "", localDate0, 0.9, "2:NaHbqB.");
        uMeR0.registerUser(driver0, (String) null);
        // Undeclared exception!
        try {
            uMeR0.ordDriver((Comparator<Driver>) null);
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Client> hashMap0 = new HashMap<String, Client>();
        hashMap0.put("['(LXzrV:)Y`", (Client) null);
        uMeR0.setClients(hashMap0);
        Comparator<Client> comparator0 = (Comparator<Client>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            uMeR0.ordClient(comparator0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 8.5);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        uMeR0.registerUser(client0, "E>iL*OUrvz[ZMcNY$");
        // Undeclared exception!
        try {
            uMeR0.ordClient((Comparator<Client>) null);
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Client client0 = new Client("NeH!%<p^n", "NeH!%<p^n", "", "UMeR", localDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Helicopter helicopter0 = new Helicopter("", (-1005.6368928863), point2D_Double0, "N),");
        // Undeclared exception!
        try {
            uMeR0.newTrip(client0, (Driver) null, helicopter0, point2D_Double0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        // Undeclared exception!
        try {
            UMeR.loadUMeR((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[A7CtbWPE::/]h=Ad");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "UMeR");
        try {
            UMeR.loadUMeR("[A7CtbWPE::/]h=Ad");
            fail("Expecting exception: StreamCorruptedException");

        } catch (StreamCorruptedException e) {
            //
            // invalid stream header: 554D6552
            //
            verifyException("java.io.ObjectInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[A7CtbWPE::/]h=Ad");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "UMeR");
        FileSystemHandling.shouldAllThrowIOExceptions();
        try {
            UMeR.loadUMeR("[A7CtbWPE::/]h=Ad");
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Simulated IOException
            //
            verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTrips((ArrayList<Trip>) null);
        // Undeclared exception!
        try {
            uMeR0.getTrips();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setClients((HashMap<String, Client>) null);
        // Undeclared exception!
        try {
            uMeR0.getClients();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setAllDrivers((HashMap<String, Driver>) null);
        // Undeclared exception!
        try {
            uMeR0.getAllDrivers();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.estimatedTime((Point2D.Double) null, (Point2D.Double) null, 0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.doTripQueue("s");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), 0.0);
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        uMeR0.registerVehicleP(bike0);
        // Undeclared exception!
        try {
            uMeR0.closestAvailableTaxi((Client) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), 0.0);
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (-1575.8211148669352), point2D_Double0, "*><P*+8:");
        uMeR0.registerVehicleP(bike0);
        // Undeclared exception!
        try {
            uMeR0.calculateTraffic((Vehicle) null, 0.0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = uMeR0.getAllDrivers();
        hashMap0.put(";ZHHqtj*OBD", (Driver) null);
        uMeR0.setDrivers(hashMap0);
        // Undeclared exception!
        try {
            uMeR0.allUsers();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = uMeR0.getDriversP();
        LocalDate localDate0 = MockLocalDate.now();
        Boolean boolean0 = Boolean.valueOf(false);
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Driver driver0 = new Driver("VT(lQi?V%p)U(", "Utilizador - ", "Utilizador - ", "VT(lQi?V%p)U(", localDate0, 0, 0, boolean0, 0, arrayList0, 0, 0, 0, "Utilizador - ", "Utilizador - ", 0);
        hashMap0.put("VT(lQi?V%p)U(", driver0);
        uMeR0.setAllDrivers(hashMap0);
        // Undeclared exception!
        try {
            uMeR0.addRating("VT(lQi?V%p)U(", 0, 0);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0, Size: 0
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Boolean boolean0 = Boolean.valueOf("H?2L]x>P");
        Driver driver0 = new Driver("", "H?2L]x>P", "", "H?2L]x>P", localDate0, 1210.0, 1210.0, boolean0, 1210.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OmUrvP[ZMcNY$", "H?2L]x>P", 0);
        uMeR0.registerCompany("", "E>iL*OmUrvP[ZMcNY$");
        uMeR0.registerUser(driver0, "");
        // Undeclared exception!
        try {
            uMeR0.addRating("", (-400659266), (-1047919891));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        boolean boolean0 = uMeR0.registerCompany("", "");
        assertTrue(boolean0);

        boolean boolean1 = uMeR0.registerCompanyVehicle("", bike0);
        assertTrue(boolean1);

        Client client0 = new Client("*><P*L&+}8:", "", "", "*><P*L&+}8:", localDate0);
        String string0 = uMeR0.closestAvailableTaxi(client0);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertNull(string0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Bike bike0 = new Bike("Empresa ", (-651.0), point2D_Double0, "Empresa ");
        boolean boolean0 = uMeR0.registerVehicleP(bike0);
        assertTrue(boolean0);

        Client client0 = new Client("Empresa ", "Empresa ", "Empresa ", "Empresa ", localDate0);
        String string0 = uMeR0.closestAvailableTaxi(client0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 8.5);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        boolean boolean0 = uMeR0.registerUser(client0, "E>iL*OUrvz[ZMcNY$");
        assertTrue(boolean0);

        uMeR0.allUsers();
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        UMeR uMeR0 = new UMeR();
        boolean boolean0 = uMeR0.registerCompany("*><P*L&+}8:", "*><P*L&+}8:");
        assertTrue(boolean0);

        uMeR0.getCompanies();
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getCompanies();
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Helicopter helicopter0 = new Helicopter("", 0.0, point2D_Double0, "2]_[8wv.L5_Jv");
        // Undeclared exception!
        try {
            uMeR0.realTime(point2D_Double0, point2D_Double0, (Driver) null, helicopter0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", "---Drivers---\n", ";ZHHqtj*OBD", "", localDate0, 0.9, "2:NaHbVBh.");
        boolean boolean0 = uMeR0.registerUser(driver0, (String) null);
        assertTrue(boolean0);

        Comparator<Driver> comparator0 = (Comparator<Driver>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((-4680)).when(comparator0).compare(any(Driver.class), any(Driver.class));
        uMeR0.ordDriver(comparator0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 8.5);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        boolean boolean0 = uMeR0.registerUser(client0, "E>iL*OUrvz[ZMcNY$");
        assertTrue(boolean0);

        Comparator<Client> comparator0 = (Comparator<Client>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((-347552835)).when(comparator0).compare(any(Client.class), any(Client.class));
        uMeR0.ordClient(comparator0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-651.0), (-651.0));
        Bike bike0 = new Bike((String) null, (-651.0), point2D_Double0, "1~");
        boolean boolean0 = uMeR0.registerCompany("1~", "1~");
        assertTrue(boolean0);

        boolean boolean1 = uMeR0.registerCompanyVehicle("1~", bike0);
        assertTrue(boolean1);

        Client client0 = new Client("1~", "1~", "1~", "1~", localDate0);
        uMeR0.newTripClosest(client0, point2D_Double0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Driver driver0 = new Driver("", "---Drivers---\n", (String) null, "", localDate0, 0.9, "---Drivers---\n");
        uMeR0.registerUser(driver0, (String) null);
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "", (String) null, (String) null, localDate0, point2D_Double0, (-1864.5), arrayList0, (-4711), 0.8271708359903139, false, (String) null);
        // Undeclared exception!
        try {
            uMeR0.newTripSpecific(client0, "", point2D_Double0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H)2L&]x>P", "", "H)2L&]x>P", localDate0, point2D_Double0, 1210.0, arrayList0, 0, 1210.0, true, "");
        Boolean boolean0 = Boolean.valueOf("H)2L&]x>P");
        Driver driver0 = new Driver("", "H)2L&]x>P", "", "H)2L&]x>P", localDate0, 1210.0, 1210.0, boolean0, 1210.0, arrayList0, 0, 1210.0, 1210.0, "H)2L&]x>P", "H)2L&]x>P", 0);
        Car car0 = new Car("", 1210.0, point2D_Double0, "");
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        boolean boolean0 = uMeR0.registerCompany("", "");
        boolean boolean1 = uMeR0.registerCompanyVehicle("", bike0);
        assertTrue(boolean1 == boolean0);

        int int0 = uMeR0.calculateTraffic(bike0, 1880.1);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(2, int0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Helicopter helicopter0 = new Helicopter("]y#a\"Yba+28fM]f", 0.9470435631979043, point2D_Double0, "]y#a\"Yba+28fM]f");
        int int0 = uMeR0.calculateTraffic(helicopter0, 0.9470435631979043);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(1, int0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        uMeR0.registerVehicleP(bike0);
        Client client0 = new Client("", "", "", "UMeR", localDate0);
        // Undeclared exception!
        try {
            uMeR0.newTripClosest(client0, point2D_Double0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        boolean boolean0 = uMeR0.registerCompany("", "");
        assertTrue(boolean0);

        boolean boolean1 = uMeR0.registerCompanyVehicle("", bike0);
        assertEquals("*><P*L&+}8:", bike0.getOwner());
        assertTrue(boolean1);

        Client client0 = new Client("*><P*L&+}8:", "", "", "*><P*L&+}8:", localDate0);
        uMeR0.newTripClosest(client0, point2D_Double0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 8.5);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        uMeR0.removeUser(client0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-651.0), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-651.0), point2D_Double0, "Empresa ");
        boolean boolean0 = uMeR0.registerVehicleP(bike0);
        assertTrue(boolean0);

        boolean boolean1 = uMeR0.registerCompany("Empresa ", "Empresa ");
        boolean boolean2 = uMeR0.registerCompanyVehicle("Empresa ", bike0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertFalse(boolean2 == boolean1);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        boolean boolean0 = uMeR0.registerCompany("", "");
        assertTrue(boolean0);

        boolean boolean1 = uMeR0.registerCompanyVehicle("", bike0);
        assertTrue(boolean1);

        int int0 = uMeR0.calculateTraffic(bike0, (-1575.8211148669352));
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(1, int0);
        assertEquals("*><P*L&+}8:", bike0.getOwner());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        boolean boolean0 = uMeR0.registerCompanyVehicle("g9'", bike0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertFalse(boolean0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        UMeR uMeR0 = new UMeR();
        boolean boolean0 = uMeR0.registerCompany("1~", "1~");
        boolean boolean1 = uMeR0.registerCompany("1~", "1~");
        assertFalse(boolean1 == boolean0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-651.0), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-651.0), point2D_Double0, "Empresa ");
        boolean boolean0 = uMeR0.registerVehicleP(bike0);
        boolean boolean1 = uMeR0.registerVehicleP(bike0);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertFalse(boolean1 == boolean0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.ofEpochDay(895L);
        Driver driver0 = new Driver("65q6NmcLu;hY", "65q6NmcLu;hY", "65q6NmcLu;hY", "65q6NmcLu;hY", localDate0, 895L, "65q6NmcLu;hY");
        boolean boolean0 = uMeR0.registerUser(driver0, "65q6NmcLu;hY");
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertFalse(boolean0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemDefaultZone();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        boolean boolean0 = uMeR0.registerCompany("", "");
        assertTrue(boolean0);

        Client client0 = new Client("*><P*L&+}8:", "", "", "*><P*L&+}8:", localDate0);
        boolean boolean1 = uMeR0.registerUser(client0, "Z*9Xn~5z|%u");
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertFalse(boolean1);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1926.4615576632), (-1926.4615576632));
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "", "", "", localDate0, point2D_Double0, (-1926.4615576632), arrayList0, 13, (-1926.4615576632), true, "");
        boolean boolean0 = uMeR0.registerUser(client0, "");
        Boolean boolean1 = Boolean.valueOf("");
        Driver driver0 = new Driver("", "", "", "", localDate0, (-1926.4615576632), (-1926.4615576632), boolean1, (-1926.4615576632), arrayList0, 13, (-1926.4615576632), (-1926.4615576632), "", "", 13);
        boolean boolean2 = uMeR0.registerUser(driver0, "");
        assertFalse(boolean2 == boolean0);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", "---Drivers---\n", ";ZHHqtj*OBD", "", localDate0, 0.9, "2:NaHbVBh.");
        boolean boolean0 = uMeR0.registerUser(driver0, (String) null);
        boolean boolean1 = uMeR0.registerUser(driver0, "*");
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertFalse(boolean1 == boolean0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Boolean boolean0 = Boolean.valueOf("H?2L]x>P");
        Driver driver0 = new Driver("", "H?2L]x>P", "", "H?2L]x>P", localDate0, 1210.0, 1210.0, boolean0, 1210.0, arrayList0, 0, 0.0, 1210.0, "E>iL*OmUrvP[ZMcNY$", "H?2L]x>P", 0);
        boolean boolean1 = uMeR0.registerCompany("", "E>iL*OmUrvP[ZMcNY$");
        assertTrue(boolean1);

        boolean boolean2 = uMeR0.registerUser(driver0, "");
        assertTrue(boolean2);

        uMeR0.allUsers();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        UMeR uMeR0 = new UMeR();
        boolean boolean0 = uMeR0.registerCompany("qh.YmB4P=kg~s_(Ix9C", "qh.YmB4P=kg~s_(Ix9C");
        assertTrue(boolean0);

        uMeR0.allUsers();
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = uMeR0.getAllDrivers();
        LocalDate localDate0 = MockLocalDate.now();
        Driver driver0 = new Driver("", (String) null, "1U", "", localDate0, 1.0, "1U");
        hashMap0.put((String) null, driver0);
        uMeR0.setDrivers(hashMap0);
        uMeR0.allUsers();
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double(1210.0, 1210.0);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "H?2L]x>P", "", "E>iL*OUrvz[ZMcNY$", localDate0, point2D_Double0, 1493.942, arrayList0, 0, 1493.942, true, "");
        boolean boolean0 = uMeR0.registerUser(client0, "E>iL*OUrvz[ZMcNY$");
        boolean boolean1 = uMeR0.registerCompany("", "E>iL*OUrvz[ZMcNY$");
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertFalse(boolean1 == boolean0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Driver driver0 = new Driver("", (String) null, (String) null, "", localDate0, 0.9, (String) null);
        driver0.setVehicle("");
        uMeR0.registerUser(driver0, (String) null);
        // Undeclared exception!
        try {
            uMeR0.changeDriverAvailability("", true);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Driver driver0 = new Driver("", "---Drivers---\n", (String) null, "", localDate0, 0.9, "---Drivers---\n");
        boolean boolean0 = uMeR0.registerUser(driver0, (String) null);
        assertTrue(boolean0);

        uMeR0.changeDriverAvailability("", true);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        UMeR uMeR0 = new UMeR();
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Trip trip0 = new Trip();
        arrayList0.add(trip0);
        arrayList0.add(trip0);
        uMeR0.setTrips(arrayList0);
        ArrayList<String> arrayList1 = uMeR0.getDates();
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(1, arrayList1.size());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getDates();
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
        LocalDate localDate0 = MockLocalDate.from(minguoDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double((-651.0), (-651.0));
        boolean boolean0 = uMeR0.registerCompany("", "");
        assertTrue(boolean0);

        Client client0 = new Client("", "", "", "", localDate0);
        uMeR0.newTripSpecific(client0, "", point2D_Double0);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Company company0 = new Company((String) null, ";ZHHqtj*OBD");
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ArrayList<Trip> arrayList0 = company0.getTrips();
        Client client0 = new Client((String) null, "", "**", "],HEHc!4bs_fd", localDate0, point2D_Double0, 1.9, arrayList0, 109, 0.9, false, "\nMatr\u00EDcula ve\u00EDculo : ");
        uMeR0.newTripSpecific(client0, "^VlL0E}pZW{hv", point2D_Double0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        UMeR uMeR0 = new UMeR();
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Trip trip0 = new Trip();
        arrayList0.add(trip0);
        uMeR0.setTrips(arrayList0);
        uMeR0.getTrips();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        boolean boolean0 = uMeR0.registerVehicleP(bike0);
        assertTrue(boolean0);

        uMeR0.getAllVehicles();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getAllVehicles();
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Clock clock0 = MockClock.systemUTC();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("", "---Drivers---\n", ";ZHHqtj*OBD", "", localDate0, 0.9, "2:NaHbVBh.");
        boolean boolean0 = uMeR0.registerUser(driver0, (String) null);
        assertTrue(boolean0);

        HashMap<String, Driver> hashMap0 = uMeR0.getAllDrivers();
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertFalse(hashMap0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-651.0), (-651.0));
        Bike bike0 = new Bike("Empresa ", (-651.0), point2D_Double0, "Empresa ");
        boolean boolean0 = uMeR0.registerVehicleP(bike0);
        assertTrue(boolean0);

        uMeR0.getVehiclesP();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getVehiclesP();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1926.4615576632), (-1926.4615576632));
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("", "", "", "", localDate0, point2D_Double0, (-1926.4615576632), arrayList0, 13, (-1926.4615576632), true, "");
        boolean boolean0 = uMeR0.registerUser(client0, "");
        assertTrue(boolean0);

        HashMap<String, Client> hashMap0 = uMeR0.getClients();
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertFalse(hashMap0.isEmpty());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = uMeR0.getAllDrivers();
        hashMap0.put("2:NaHbqB.", (Driver) null);
        uMeR0.setDrivers(hashMap0);
        // Undeclared exception!
        try {
            uMeR0.getDriversP();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        UMeR uMeR0 = new UMeR();
        double double0 = uMeR0.getTotalDistance();
        assertEquals(0.0, double0, 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.now();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ArrayList<Trip> arrayList0 = uMeR0.getTrips();
        Client client0 = new Client("", "", "", "", localDate0, point2D_Double0, 1210.0, arrayList0, 0, 1210.0, true, "");
        Boolean boolean0 = new Boolean(true);
        Driver driver0 = new Driver("", (String) null, "", "", localDate0, 8.5, 0.0, boolean0, 8.5, arrayList0, 0, 0.0, 1210.0, "", (String) null, 0.0);
        Car car0 = new Car((String) null, 8.5, point2D_Double0, "");
        uMeR0.newTrip(client0, driver0, car0, point2D_Double0);
        int int0 = uMeR0.getTripID();
        assertEquals(Double.NaN, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.cancelTripQueue("Fila de espera vazia.");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1575.8211148669352), (-651.0));
        Bike bike0 = new Bike("qh.YmB4P=kg~s_(Ix9C", (-1575.8211148669352), point2D_Double0, "*><P*L&+}8:");
        uMeR0.removeVehicle(bike0);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        UMeR uMeR0 = new UMeR();
        double double0 = uMeR0.getMoneyGenerated();
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, double0, 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setVehiclesP((HashMap<String, Vehicle>) null);
        // Undeclared exception!
        try {
            uMeR0.toString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        UMeR uMeR0 = new UMeR();
        double double0 = uMeR0.getTotalTime();
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTotalDistance((byte) (-74));
        double double0 = uMeR0.getTotalDistance();
        assertEquals((-74.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        UMeR uMeR0 = new UMeR();
        int int0 = uMeR0.getWeather();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, int0);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        try {
            UMeR.loadUMeR("[A7CtbWPE::/]h=Ad");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        UMeR uMeR0 = new UMeR();
        String string0 = uMeR0.toString();
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals("---Drivers---\n[]\n---Clients---\n[]\n---Vehicles---\n[]\n---Number of trips---\n0", string0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTotalTime((-651.0));
        double double0 = uMeR0.getTotalTime();
        assertEquals((-651.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.changeDriverVehicle("x}fW* lfG", "x}fW* lfG");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        UMeR uMeR0 = new UMeR();
        int int0 = uMeR0.getTripID();
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, int0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.addRating((String) null, 0, 0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTrips((ArrayList<Trip>) null);
        // Undeclared exception!
        try {
            uMeR0.getDates();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("UMeR", e);
        }
    }

    //dá erro quando o condutor se mete indisponivel, este continua disponivel
    @Test
    public void changeDriverAvailability() {
        UMeR u = new UMeR();
        Driver driver0 = new Driver("u|+q#", "u|+q#", "u|+q#", "u|+q#", LocalDate.of(1990, 4, 23), 4.0, "u|+q#");
        u.registerUser(driver0, null);
        u.changeDriverAvailability("u|+q#", false);
        assertEquals(false, driver0.isAvailable());
        u.changeDriverAvailability("u|+q#", true);
        assertEquals(true, driver0.isAvailable());
    }

    @Test
    public void changeDriverVehicle() {
        UMeR u = new UMeR();
        Driver driver0 = new Driver("u|+q#", "u|+q#", "u|+q#", "u|+q#", LocalDate.of(1990, 4, 23), 4.0, "u|+q#");
        u.registerUser(driver0, null);
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Car car0 = new Car("matricula", 3023.4061587, point2D_Double0, "E%bB(EvkbG3Taf(Dn");
        u.registerVehicleP(car0);

        u.changeDriverVehicle("u|+q#", car0.getLicencePlate());
        assertEquals("matricula", u.getAllDrivers().get("u|+q#").getVehicle());
        u.changeDriverVehicle("u|+q#", "mat");
        assertEquals("mat", u.getAllDrivers().get("u|+q#").getVehicle());
    }

    @Test
    public void closestAvailableTaxi() {
        UMeR u = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double(5, 3);
        Car car0 = new Car("matricula", 3023.4061587, point2D_Double0, "E%bB(EvkbG3Taf(Dn");
        u.registerVehicleP(car0);
        Car car1 = new Car("mat", 3023.4061587, new Point2D.Double(-2, -2), "E%bB(EvkbG3Taf(Dn");
        u.registerVehicleP(car1);
        Client c = new Client("b3tzpG%Gw2G-", "", "b3tzpG%Gw2G-", "", LocalDate.of(1990, 11, 12));

        assertEquals("mat", u.closestAvailableTaxi(c));
        u.getAllVehicles().get(car1.getLicencePlate()).setAvailable(false);
        assertEquals("matricula", u.closestAvailableTaxi(c));
    }

    @Test
    public void addRating() {
        UMeR u = new UMeR();
        Driver driver0 = new Driver("aa", "u|+q#", "u|+q#", "u|+q#", LocalDate.of(1990, 4, 23), 4.0, null);
        u.registerUser(driver0, null);
        Car car1 = new Car("mat", 3023.4061587, new Point2D.Double(-2, -2), "E%bB(EvkbG3Taf(Dn");
        u.registerVehicleP(car1);
        Trip trip0 = new Trip(0, new Point2D.Double(), new Point2D.Double(3, 4), 8.0, 5.0, LocalDate.of(2018, 10, 20), "mat", "aa#", "joao", (-1), 4.0, new Point2D.Double(), 5.0, 6.0, 5.0);
        Client c = new Client("joao", "joao", "b3tzpG%Gw2G-", "", LocalDate.of(1990, 11, 12));
        u.registerUser(c, null);

        u.addTrip("joao", "aa", "mat", trip0);
        u.addRating("aa", 4, 0);
        //assertEquals(80,u.getTrips().get(0).getRating(),0.0001);
        assertEquals(80, u.getDriversP().get("aa").getRating(), 0.0001);
        assertEquals(1, u.getDriversP().get("aa").getNumberOfReviews(), 0.0001);
        assertEquals(1, driver0.getNumberOfReviews(), 0.0001);

    }

    @Test
    public void addRating1() {
        UMeR u = new UMeR();
        Driver driver0 = new Driver("aa", "u|+q#", "u|+q#", "u|+q#", LocalDate.of(1990, 4, 23), 4.0, null);
        u.registerUser(driver0, null);
        Car car1 = new Car("mat", 3023.4061587, new Point2D.Double(-2, -2), "E%bB(EvkbG3Taf(Dn");
        u.registerVehicleP(car1);
        Trip trip0 = new Trip(0, new Point2D.Double(), new Point2D.Double(3, 4), 8.0, 5.0, LocalDate.of(2018, 10, 20), "mat", "aa#", "joao", (-1), 4.0, new Point2D.Double(), 5.0, 6.0, 5.0);
        Client c = new Client("joao", "joao", "b3tzpG%Gw2G-", "", LocalDate.of(1990, 11, 12));
        u.registerUser(c, null);

        u.addTrip("joao", "aa", "mat", trip0);
        u.addRating("aa", 4, 0);

        assertEquals(80, u.getTrips().get(0).getRating(), 0.0001);
        //assertEquals(80,u.getDriversP().get("aa").getRating(),0.0001);
        //assertEquals(1,driver0.getNumberOfReviews(),0.0001);
    }

    //taxi mantem posição
    @Test
    public void doTripQueue() {
        UMeR u = new UMeR();
        Driver driver0 = new Driver("aa", "u|+q#", "u|+q#", "u|+q#", LocalDate.of(1990, 4, 23), 4.0, null);
        u.registerUser(driver0, null);
        Car car1 = new Car("mat", 3023.4061587, new Point2D.Double(-2, -2), "E%bB(EvkbG3Taf(Dn");
        u.registerVehicleP(car1);
        u.changeDriverVehicle("aa","mat");
        Client c = new Client("joao", "joao", "b3tzpG%Gw2G-", "", LocalDate.of(1990, 11, 12));
        u.registerUser(c, null);

        u.addQueue("joao","aa",new Point2D.Double(-2,0),new Point2D.Double(0,2));
        u.doTripQueue("aa");

        assertEquals(0,u.getClients().get("joao").getPosition().getX(),0.0001);
        assertEquals(2,u.getClients().get("joao").getPosition().getY(),0.0001);
        assertEquals(0,u.getVehiclesP().get("mat").getPosition().getX(),0.0001);
        assertEquals(2,u.getVehiclesP().get("mat").getPosition().getY(),0.0001);
    }

    @Test
    public void doTripQueue1() {
        UMeR u = new UMeR();
        u.registerCompany("taxi","asas");
        Driver driver0 = new Driver("aa", "u|+q#", "u|+q#", "u|+q#", LocalDate.of(1990, 4, 23), 4.0, "taxi");
        u.registerUser(driver0, null);
        Car car1 = new Car("mat", 3023.4061587, new Point2D.Double(0, 1), "E%bB(EvkbG3Taf(Dn");
        u.registerCompanyVehicle("taxi",car1);
        u.changeDriverVehicle("aa","mat");
        Client c = new Client("joao", "joao", "b3tzpG%Gw2G-", "", LocalDate.of(1990, 11, 12));
        u.registerUser(c, null);

        u.addQueue("joao","aa",new Point2D.Double(0,1),new Point2D.Double(0,2));
        u.doTripQueue("aa");

        assertEquals(1,u.getCompanies().get("taxi").getTotalTrips(),0.001);
        assertEquals(1,u.getClients().get("joao").getTotalDistance(),0.001);
        assertEquals(1,u.getAllDrivers().get("aa").getNumberOfTrips(),0.001);
        assertEquals(1,u.getAllVehicles().get("mat").getTrips().size(),0.001);
        assertEquals(1,u.getAllDrivers().get("aa").getTotalDistance(),0.001);


    }
}
